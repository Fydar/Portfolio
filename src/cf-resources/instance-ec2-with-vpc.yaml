AWSTemplateFormatVersion: '2010-09-09'

Description: 'ECS cluster: Portfolio'
Parameters:

  Tag:
    Type: String
    Description: 'Image tag to launch task with.'
    Default: 'latest'

  Cname:
    Type: String
    Description: The CNAME for the deployed server.
    Default: 'www.anthonymarmont.com.'
    AllowedPattern: '^[-a-z\d]+.anthonymarmont\.com\.$'


  VpcCidr:
    Type: String
    Description: Specifies the CIDR Block of VPC
    Default: '10.10.0.0/16'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24)$'
    
  SubnetIPv4Cidr1:
    Type: String
    Description: Specifies the IPv4 CIDR Block of Subnet 1
    Default: '10.10.0.0/24'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24|32)$'
    
  SubnetIPv4Cidr2:
    Type: String
    Description: Specifies the IPv4 CIDR Block of Subnet 2
    Default: '10.10.1.0/24'
    AllowedPattern: '^((1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\/(8|16|24|32)$'
    
  SubnetIpv6Cidr1:
    Type: String
    Description: Specifies the IPv6 CIDR Block of Subnet 1
    Default: '2600:1f18:30d:9606::/64'
    AllowedPattern: '^([0-9a-fA-F]{1,4}:){4}:/64$'
    
  SubnetIpv6Cidr2:
    Type: String
    Description: Specifies the IPv6 CIDR Block of Subnet 2
    Default: '2600:1f18:30d:9607::/64'
    AllowedPattern: '^([0-9a-fA-F]{1,4}:){4}:/64$'

  SubnetAz1:
    Type: String
    Description: >
      Specifies an availability zone for a subnet.
    Default: 'us-east-1a'
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - us-east-1e
      - us-east-1f
    
  SubnetAz2:
    Type: String
    Description: >
      Specifies an availability zone for a subnet.
    Default: 'us-east-1b'
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
      - us-east-1e
      - us-east-1f

Mappings: {}
Resources:

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref SubnetAz1
      CidrBlock: !Ref SubnetIPv4Cidr1
      MapPublicIpOnLaunch: true
      ##Ipv6CidrBlock: !Ref SubnetIpv6Cidr1
      ##AssignIpv6AddressOnCreation: true

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Ref SubnetAz2
      CidrBlock: !Ref SubnetIPv4Cidr2
      MapPublicIpOnLaunch: true
      #Ipv6CidrBlock: !Ref SubnetIpv6Cidr2
      #AssignIpv6AddressOnCreation: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgwIpv4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteViaIgwIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw


  PortfolioInstanceCname:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: anthonymarmont.com.
      Name: !Ref Cname
      ResourceRecords:
        - !GetAtt 
          - PortfolioInstanceLoadBalancer
          - DNSName
      Type: CNAME
      TTL: '30'

  PortfolioCluster:
    Type: 'AWS::ECS::Cluster'

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Sid: ''
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Sid: ''
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: ecs-tasks.amazonaws.com
            Sid: ''
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Sid: ''
      Policies:
        - PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "*"
                Resource: "*"
              - Effect: Allow
                Action: 'ses:SendRawEmail'
                Resource: '*'
              - Effect: Allow
                Action: 'ses:SendEmail'
                Resource: '*'
          Roles: 
            - Ref: "RolePolicies"


  PortfolioInstanceTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 
        - ECSTaskExecutionRole
        - Arn
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: portfolio-instance
          Image: !Sub 222779217717.dkr.ecr.us-east-1.amazonaws.com/portfolioinstance:${Tag}
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: HTTP
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: portfolio-logs
              awslogs-region: us-east-1
              awslogs-stream-prefix: portfolio-instance
      TaskRoleArn: !GetAtt 
        - ECSTaskRole
        - Arn



  PortfolioInstanceService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref PortfolioCluster
      ServiceName: PortfolioInstance
      TaskDefinition: !Ref PortfolioInstanceTask
      LaunchType: EC2
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PortfolioInstanceServiceSecurityGroup
          Subnets:
            - !Ref PubSubnetAz1
            - !Ref PubSubnetAz2

  PortfolioInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
        LaunchTemplateName: "Instance Launch Data"
        LaunchTemplateData: 
          InstanceType: "t2.micro"
          ImageId: ami-088beb3aba8c353f1
          NetworkInterfaces:
            - DeviceIndex: 0
              NetworkInterfaceId: !Ref webXface


  ## A single EC2 Instance that's going to run in ECS.
  AssociateWebPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt WebPortAddress.AllocationId
      NetworkInterfaceId: !Ref webXface

  PortfolioInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: 'Allow TCP ports 22, 80 and 443 for IPv4 and IPv6'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIpv6: '::/0'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: '::/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: '::/0'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  webXface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref SubnetId
      Description: Interface for controlling traffic such as SSH
      GroupSet: 
      - !Ref PortfolioInstanceSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Network
          Value: Web


Outputs: {}

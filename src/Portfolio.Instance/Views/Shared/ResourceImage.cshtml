@using Portfolio.Instance.Services.ContentService;
@using Portfolio.Models;
@using System.IO;

@model ResourceImageViewModel;

@inject IContentService contentService;

<div class="image">
	<svg class="overlay" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
		<filter id="blur" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
			<feGaussianBlur stdDeviation="8 8" edgeMode="duplicate" />
			<feComponentTransfer>
				<feFuncA type="discrete" tableValues="1 1" />
			</feComponentTransfer>
		</filter>
		@{
			using var stream = contentService.GetResource(ResourceHelper.TransformName(Model.Image, "blur")).Content.LoadStream();

			byte[] bytes;
			using (var memoryStream = new MemoryStream())
			{
				stream.CopyTo(memoryStream);
				bytes = memoryStream.ToArray();
			}

			string base64 = Convert.ToBase64String(bytes);
		}
		<image filter="url(#blur)"
			   xlink:href="data:image/jpeg;base64,@Html.Raw(base64)"
			   x="0" y="0" height="100%" width="100%" preserveAspectRatio="xMidYMid slice" />
	</svg>

	@if (Model.Unblur)
	{
		<img src="~/@ResourceHelper.TransformName(Model.Image, Model.Size)" loading="lazy" class="overlay" style="object-fit: cover;" />
	}
</div>


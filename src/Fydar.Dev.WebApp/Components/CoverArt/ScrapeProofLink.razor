@using System.Text

<a href="" onclick="revealLink()">Click to Reveal</a>

<script>
    function decodeString(encodedText) {
        var decodedText = '';
        for (var i = 0; i < encodedText.length; i++) {
            var charCode = encodedText.charCodeAt(i);
            if (charCode >= 65 && charCode <= 90) {
                decodedText += String.fromCharCode(((charCode - 65 - 3 + 26) % 26) + 65);
            } else if (charCode >= 97 && charCode <= 122) {
                decodedText += String.fromCharCode(((charCode - 97 - 3 + 26) % 26) + 97);
            } else {
                decodedText += encodedText.charAt(i);
            }
        }
        return decodedText;
    }

    function revealLink() {
        if (!event.srcElement.classList.contains("revealed")) {
            event.srcElement.innerText = decodeString("@EncodeString(LinkText)");
            event.srcElement.href = decodeString("@EncodeString(LinkDestination)");
            event.srcElement.style = null;
            event.srcElement.classList.add("revealed");
            event.preventDefault();
        }
    }
</script>

@code {
    [Parameter] public string LinkText { get; set; } = string.Empty;
    [Parameter] public string LinkDestination { get; set; } = string.Empty;
    [Parameter] public string LinkTarget { get; set; } = "_blank";

    private static string EncodeString(string input)
    {
        var encodedText = new StringBuilder();
        foreach (char c in input)
        {
            if (char.IsLetter(c))
            {
                char encodedChar = (char)(c + 3);
                if (char.IsLower(c) && encodedChar > 'z' || char.IsUpper(c) && encodedChar > 'Z')
                {
                    encodedChar = (char)(encodedChar - 26);
                }
                encodedText.Append(encodedChar);
            }
            else
            {
                encodedText.Append(c);
            }
        }
        return encodedText.ToString();
    }
}
